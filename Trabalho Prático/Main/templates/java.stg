// Dicion√°rios

typeValue ::= [
    "int":"int",
    "double":"double",
    "boolean":"boolean",
    "String":"String",
    "Quiz":"Quiz",
    default:"null"
]

booleanValue ::= [
   "true":"true",
   "false":"false",
   default:"null"
]

//Templates

stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

whiteSpace() ::= <<

>>

module(name,stat) ::= <<
public class <name> {
private static Scanner in = new Scanner(System.in);
    public static void main(String[] args) throws Exception {
          <stats(stat)>
    }
}
>>

program(load,main) ::= <<
import java.util.*;
import javaClasses.*;
import javaTypes.*;
<load>
<main>
>>

load(qst) ::= <<
import <qst>;
>>

qst(fileName) ::= <<
<fileName>
>>

comment(string) ::= <<
//<string>
>>

newQuestionsBank(id,filename) ::= <<
QuestionsBank <id> = QuestionarioMain.interpreter("<filename>");
>>

quizMap(id) ::= <<
Map\<String,List\<Section\>> <id> = new HashMap\<>();
>>

quizAdd(string,quiz) ::= <<
quizMap.put("<string>",<quiz>);
>>

section(name,id) ::= <<
Section <name> = new Section("<id>");
>>

sectionSetPercentage(id,dif) ::= <<
<id>.setPercentagem(<dif>);
>>

sectionAddQuestion(id,question) ::= <<
<id>.addQuestion(<question>);
>>

sectionAddListQuestion(id,listQuestion) ::= <<
<id>.addQuestionList(<listQuestion>);
>>

sectionList(id) ::= <<
List\<Section> <id> = new ArrayList\<>();
>>

listAddSection(stat,id,section) ::= <<
<id>.add(<section>);
>>

question(quiz,base,id) ::= <<
Question <quiz>_<base>_<id> = <base>.getById("<id>");
>>

questionList(id) ::= <<
List\<Question> <id> = new ArrayList\<>();
>>

questionSetId(question,id) ::= <<
<question>.setID("<id>");
>>

listAddQuestion(id,question) ::= <<
<id>.add(<question>);
>>

questionGetAns(qstId,ansId) ::= <<
<qstId>.enableAnswer("<ansId>");
>>

questionGetAll(qstId) ::= <<
<qstId>.enableAll();
>>

assign(stat,var,value) ::= <<
<stats(stat)>
<var> = <value>;
>>

quizAssign(stat,var,value1,value2) ::= <<
<stats(stat)>
<var> = new Quiz(<value1>,<value2>);
>>

quizSetSection(var,listSection) ::= <<
<var>.setListSections(<listSection>);
>>

init(value) ::= "<if(value)> = <value><endif>"
decl(type,var,value) ::= "<typeValue.(type)> <var><init(value)>;"

valueBoolean(value) ::= "<booleanValue.(value)>"

addSubMultDiv(stat, type, var, expr1, op, expr2) ::= <<
<stats(stat)>
<decl(type,var,[expr1," ",op," ",expr2])>
>>

print(stat,expr) ::= <<
<stats(stat)>
System.out.print(<expr>);
>>

ifCondition(stat,simpleIfCondition,elseIfCondition,elseCondition) ::= <<
<stats(stat)>
<simpleIfCondition>
<elseIfCondition>
<elseCondition>
>>

simpleIfCondition(stat, condition, stat_true) ::= <<
<stats(stat)>
if(<condition>){
    <if(stat_true)><stat_true; separator = "\n"><endif>
}
>>

elseIfCondition(stat, condition, stat_true) ::= <<
<stats(stat)>
else if(<condition>){
    <if(stat_true)><stat_true; separator = "\n"><endif>
}
>>

elseCondition(stat, stat_true) ::= <<
<stats(stat)>
else{
    <if(stat_true)><stat_true; separator = "\n"><endif>
}
>>

whileCondition(stat, condition, stat_true) ::= <<
<stats(stat)>
while(<condition>){
    <if(stat_true)><stat_true; separator = "\n"><endif>
}
>>

forCondition(stat, var1, var2, stat_loop) ::= <<
<stats(stat)>
for(<var1> : <var2>){
    <if(stat_loop)><stat_loop; separator = "\n"><endif>
}
>>

andOrCondition(stat, type, var, condition1, op, condition2) ::= <<
<stats(stat)>
<decl(type,var,[condition1," ",op," ",condition2])>
>>

comparation(stat, type, var, expr1, condition, expr2) ::= <<
<stats(stat)>
<decl(type,var,[expr1," ",condition," ",expr2])>
>>

incrementDecrement(var,op) ::= <<
<var><op>;
>>

lineRead(var) ::= <<
<var> = in.nextLine();
>>
